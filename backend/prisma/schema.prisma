//| DB connection |//
//-----------------//
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//| Models |//
//----------//
model User {
  id               Int      @id @default(autoincrement())
  avatar           String   @db.VarChar(255)
  biography        String   @db.VarChar(255)
  reliabilityScore Int
  premiumStatus    Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isActive         Boolean  @default(true)
  isDeleted        Boolean  @default(false)
  poi              poi[]
  Market           Market[]
  RequestsReceived Request[] @relation("received")
  RequestsSent     Request[] @relation("sent")   
  Reviews          Review[]
}

model Image {
  id    Int    @id @default(autoincrement())
  url   String
  poi   poi    @relation(fields: [poiId], references: [id])
  poiId Int
}

enum PoiStatus {
  unlisted
  verfied
  private
}

model poi {
  id          Int       @id @default(autoincrement())
  latitude    String    @db.VarChar(31)
  longitudes  String    @db.VarChar(31)
  category    String    @db.VarChar(255)
  status      PoiStatus
  description String    @db.VarChar(255)
  image       Image[]
  owner       User      @relation(fields: [ownerId], references: [id])
  Reviews     Review[]
  ownerId     Int
  rating      Int
  isDeleted   Boolean   @default(false)
}

model Market {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  price     Float
  seller    User     @relation(fields: [sellerId], references: [id])
  sellerId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
}

model Review {
  reviewId         Int      @id
  userId           Int       
  poiId            Int        
  reviewer         User     @relation(fields: [userId], references: [id])
  poi              poi      @relation(fields: [poiId], references: [id])
  rating           Int
  description      String   @db.VarChar(255)
  reliabilityScore Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isDeleted        Boolean  @default(false)
}

enum requestType {
  friend
  purchase
  share
  verify
}

enum requestStatus {
  requested
  accepted
  rejected
}

model Request {
  requestId Int           @id
  type      requestType   
  sender    User          @relation("received", fields: [requestId], references: [id])
  fromId    Int   
  toId      Int
  recipient User          @relation("sent", fields: [toId], references: [id])
  status    requestStatus
  createdAt DateTime      @default(now())
}