generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar(255)
  email            String          @db.VarChar(255)
  avatar           String          @db.VarChar(255)
  biography        String          @db.VarChar(255)
  reliabilityScore Int
  premiumStatus    Boolean         @default(false)
  mapBux           Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isActive         Boolean         @default(true)
  isDeleted        Boolean         @default(false)
  poi              poi[]
  Review           Review[]
  marketListing    marketListing[]
  Transaction      Transaction[]
}

model Image {
  id    Int    @id @default(autoincrement())
  url   String
  poiId Int
  poi   poi    @relation(fields: [poiId], references: [id])

  @@index([poiId], map: "Image_poiId_fkey")
}

model poi {
  id            Int             @id @default(autoincrement())
  latitude      Float           
  longitudes    Float           
  category      String          @db.VarChar(255)
  status        PoiStatus
  description   String          @db.VarChar(255)
  ownerId       Int
  rating        Int
  reports       Int
  isDeleted     Boolean         @default(false)
  image         Image[]
  owner         User            @relation(fields: [ownerId], references: [id])
  Review        Review[]
  marketListing marketListing[]

  @@index([ownerId], map: "poi_ownerId_fkey")
}

enum PoiStatus {
  unlisted
  verified
  private
}

model marketListing {
  id          Int           @id @default(autoincrement())
  price       Float
  seller      User          @relation(fields: [sellerId], references: [id])
  sellerId    Int
  poi         poi           @relation(fields: [poiId], references: [id])
  poiId       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  isDeleted   Boolean       @default(false)
  Transaction Transaction[]
}

model Transaction {
  id              Int           @id @default(autoincrement())
  buyer           User          @relation(fields: [buyerId], references: [id])
  buyerId         Int
  listing         marketListing @relation(fields: [listingId], references: [id])
  listingId       Int
  transactionDate DateTime      @default(now())
}

model Review {
  reviewId         Int      @id
  userId           Int
  poiId            Int
  reviewer         User     @relation(fields: [userId], references: [id])
  poi              poi      @relation(fields: [poiId], references: [id])
  rating           Int
  description      String   @db.VarChar(255)
  reliabilityScore Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isDeleted        Boolean  @default(false)
}

enum friendshipStatus {
  requested
  accepted
  rejected
}

model Friendship {
  friendshipId Int              @id
  userIdFrom   Int
  userIdTo     Int
  status       friendshipStatus @default(requested)
  createdAt    DateTime         @default(now())
}
