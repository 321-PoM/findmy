//| DB connection |//
//-----------------//
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//| Models |//
//----------//
model User {
  id               Int      @id @default(autoincrement())
  avatar           String   @db.VarChar(255)
  biography        String   @db.VarChar(255)
  reliabilityScore Int
  premiumStatus    Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isActive         Boolean  @default(true)
  isDeleted        Boolean  @default(false)
  poi              poi[]
  Market           Market[]
  friends          friendship[] @relation("user")
  friendsOf        friendship[] @relation("friend")
}

model Image {
  id    Int    @id @default(autoincrement())
  url   String
  poi   poi    @relation(fields: [poiId], references: [id])
  poiId Int
}

enum PoiStatus {
  unlisted
  verfied
  private
}

model poi {
  id          Int       @id @default(autoincrement())
  latitude    String    @db.VarChar(31)
  longitudes  String    @db.VarChar(31)
  category    String    @db.VarChar(255)
  status      PoiStatus
  description String    @db.VarChar(255)
  image       Image[]
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     Int
  rating      Int
  isDeleted   Boolean   @default(false)
}

model Market {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  price     Float
  seller    User     @relation(fields: [sellerId], references: [id])
  sellerId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
}

model review {
  userId           Int       @id
  poiId            Int       
  rating           Int
  description      String    @db.VarChar(255)
  reliabilityScore Int
  createdAt        DateTime  @default(now())
  isDeleted        Boolean   @default(false)
}

enum FriendshipStatus {
  requested
  accepted
  rejected
}

model friendship {
  friendshipId Int              @id
  userId       Int
  friendId     Int
  user         User             @relation("user", fields: [userId], references: [id]) 
  friend       User             @relation("friend", fields: [friendId], references: [id])
  status       FriendshipStatus
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}