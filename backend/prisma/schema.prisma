generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(255)
  email            String   @db.VarChar(255)
  avatar           String   @db.VarChar(255)
  biography        String   @db.VarChar(255)
  reliabilityScore Int
  premiumStatus    Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isActive         Boolean  @default(true)
  isDeleted        Boolean  @default(false)
  poi              poi[]
  Market           Market[]
  Review           Review[]
}

model Image {
  id    Int    @id @default(autoincrement())
  url   String
  poiId Int
  poi   poi    @relation(fields: [poiId], references: [id])

  @@index([poiId], map: "Image_poiId_fkey")
}

model poi {
  id          Int       @id @default(autoincrement())
  latitude    String    @db.VarChar(31)
  longitudes  String    @db.VarChar(31)
  category    String    @db.VarChar(255)
  status      PoiStatus
  description String    @db.VarChar(255)
  ownerId     Int
  rating      Int
  isDeleted   Boolean   @default(false)
  image       Image[]
  owner       User      @relation(fields: [ownerId], references: [id])
  Review      Review[]

  @@index([ownerId], map: "poi_ownerId_fkey")
}

enum PoiStatus {
  unlisted
  verfied
  private
}

model Market {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  price     Float
  seller    User     @relation(fields: [sellerId], references: [id])
  sellerId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isDeleted Boolean  @default(false)
}

model Review {
  reviewId         Int      @id
  userId           Int
  poiId            Int
  reviewer         User     @relation(fields: [userId], references: [id])
  poi              poi      @relation(fields: [poiId], references: [id])
  rating           Int
  description      String   @db.VarChar(255)
  reliabilityScore Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isDeleted        Boolean  @default(false)
}

enum friendshipStatus {
  requested
  accepted
  rejected
}

model Friendship {
  friendshipId Int              @id
  userIdFrom   Int
  userIdTo     Int
  status       friendshipStatus @default(requested)
  createdAt    DateTime         @default(now())
}
